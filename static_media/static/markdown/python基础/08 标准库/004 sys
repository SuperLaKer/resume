## sys.argv

功能：在外部向程序内部传递参数
示例：`sys.py`

```
#!/usr/bin/env python

import sys
print sys.argv[0]
print sys.argv[1]
```

运行：

```
# python sys.py argv1
sys.py
argv1
```

 

自己动手尝试一下，领悟参数对应关系

## sys.exit(n)

功能：执行到主程序末尾，解释器自动退出，但是如果需要中途退出程序，可以调用sys.exit函数，带有一个可选的整数参数返回给调用它的程序，表示你可以在主程序中捕获对sys.exit的调用。（0是正常退出，其他为异常）

示例：`exit.py`

```
#!/usr/bin/env python

import sys

def exitfunc(value):
    print value
    sys.exit(0)

print "hello"

try:
    sys.exit(1)
except SystemExit,value:
    exitfunc(value)

print "come?"
```

运行：

```
# python exit.py
hello
1
```

 

## sys.path

功能：获取指定模块搜索路径的字符串集合，可以将写好的模块放在得到的某个路径下，就可以在程序中import时正确找到。

示例：

```
def sys_path():
    # 获取模块搜索路径集合
    # 可以将.py文件放到目录中，可以被找到
    # 添加搜索路径：sys.path.append("自定义模块所在路径")
    sys.path.append(r"d:\ENV\bat") 
    for i in sys.path:
        print i

# 等等路径
D:\project\git_windows\PSL
D:\ENV\vir27psl\Scripts\python27.zip
D:\ENV\vir27psl\DLLs
D:\ENV\Python27\Lib
D:\ENV\Python27\Lib\lib-tk
D:\ENV\vir27psl
D:\ENV\vir27psl\lib\site-packages
d:\ENV\bat
```

 

```
sys.path.append("自定义模块路径")
```

## sys.modules

功能：`sys.modules`是一个全局字典，该字典是python启动后就加载在内存中。每当程序员导入新的模块，`sys.modules`将自动记录该模块。当第二次再导入该模块时，python会直接到字典中查找，从而加快了程序运行的速度。它拥有字典所拥有的一切方法。

示例：`modules.py`

```
#!/usr/bin/env python

import sys

print sys.modules.keys()

print sys.modules.values()

print sys.modules["os"]
```

运行：

```
python modules.py
['copy_reg', 'sre_compile', '_sre', 'encodings', 'site', '__builtin__',......
```

 

## sys.stdin\stdout\stderr

功能：stdin , stdout , 以及stderr 变量包含与标准I/O 流对应的流对象. 如果需要更好地控制输出,而print 不能满足你的要求, 它们就是你所需要的. 你也可以替换它们, 这时候你就可以重定向输出和输入到其它设备( device ), 或者以非标准的方式处理它们